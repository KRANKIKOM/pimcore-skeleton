name: Deploy

on:
  workflow_dispatch:
    inputs:
      imagelabel:
        required: true
        description: 'Docker Image Label/Version (use numeric, never use "latest")'
        type: string
      environment:
        description: 'Environment'
        type: environment
        required: true
      k8scontext:
        description: 'Kubernetes Context'
        required: true
        default: 'm-k8s-dev'
        type: choice
        options:
          - m-k8s-dev
          - m-k8s-production
      pimcore_install:
        description: 'Run pimcore installation'
        required: false
        type: boolean

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}
  # Pre-set NAMESPACE_PREFIX from a GitHub variable if available
  NAMESPACE_PREFIX: ${{ vars.NAMESPACE_PREFIX }}
  
jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
    
      - uses: kenchan0130/actions-system-info@master
        id: system-info
    
      - name: Cache kubectl
        id: cache-kubectl
        uses: actions/cache@v3
        with:
          path: /usr/local/bin/kubectl
          key: ${{ runner.os }}-${{ steps.system-info.outputs.release }}-kubectl
      
      - name: Install kubectl
        run: |
          if [ -z "${{ steps.cache-kubectl.outputs.cache-hit }}" ]; then
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x ./kubectl
            sudo mv ./kubectl /usr/local/bin/kubectl
          else
            echo "Using cached kubectl"
          fi


      - name: Cache kubeval
        id: cache-kubeval
        uses: actions/cache@v3
        with:
          path: /usr/local/bin/kubeval
          key: ${{ runner.os }}-${{ steps.system-info.outputs.release }}-kubeval
          
      - name: Install kubeval
        run: |
          if [ -z "${{ steps.cache-kubeval.outputs.cache-hit }}" ]; then
            curl -L https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz -o kubeval.tar.gz
            tar xf kubeval.tar.gz
            chmod +x kubeval
            sudo mv kubeval /usr/local/bin
          else
            echo "Using cached kubeval"
          fi
          
      - id: lowercase-fully-qualified-image-name
        name: Lowercase fully qualified image name
        uses: ASzc/change-string-case-action@v2
        with:
          string: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
     

      - name: Cache vendor directory
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-${{ steps.system-info.outputs.release }}-vendor-${{ hashFiles('composer.lock') }}
      - name: run devsetup composer install
        run: |
          if [ -d vendor/krankikom ]; then
            echo "vendor/krankikom exists, skipping composer install"
          else
            ./devsetup-composer-install.sh
          fi


      - name: Set NAMESPACE_PREFIX if not already set
        run: |
          if [[ -z "${NAMESPACE_PREFIX}" ]]; then
            # NAMESPACE_PREFIX is not set, compute and set it
            PREFIX=$(echo "${GITHUB_REPOSITORY}" | cut -d '/' -f 2 | cut -d '-' -f 1)
            echo "Setting NAMESPACE_PREFIX to $PREFIX"
            echo "NAMESPACE_PREFIX=$PREFIX" >> $GITHUB_ENV
          else
            # NAMESPACE_PREFIX is already set, use the existing value
            echo "Using existing NAMESPACE_PREFIX: ${NAMESPACE_PREFIX}"
          fi
          
      - name: Kustomize and kubectl apply
        run: |
          export KUBECONFIG="$PWD/kubeconfig"
          echo "$KUBECFGSECRET" >"$KUBECONFIG"
          cd "kubernetes/$ENVIRONMENT"
          ls -al
          echo ""
          echo ""
          echo "---------------------------------"
          echo "Setting image version (php-fpm)"
          kustomize edit set image "${FULL_IMAGENAME_LOWER}:${IMAGELABEL}"
          echo "Setting image version (migrations)"
          kustomize edit set image "k-registry.krankikom.de/krankikom/pimcore-website=${FULL_IMAGENAME_LOWER}:${IMAGELABEL}"
          echo "Setting image version (apache)"
          kustomize edit set image "k-registry.krankikom.de/library/apache-fcgi=${FULL_IMAGENAME_LOWER}-apache:${IMAGELABEL}"
          cat kustomization.yaml
          echo "build dry-run"
          kustomize build
          echo "---------------------------------"
          echo "Running kubeval"
          kustomize build | kubeval --ignore-missing-schemas --strict --force-color
          echo "---------------------------------"
          echo "Deleting pimcore-migration Job (so we can recreate it) ... a failure is not a problem:"
          kubectl -n "${NAMESPACE_PREFIX}-${ENVIRONMENT}" --context="${CONTEXT}" delete job pimcore-migration || true
          echo "---------------------------------"
          echo "Running kubectl apply"
          kustomize build | kubectl --context="${CONTEXT}" apply -f -
          echo "---------------------------------"
          echo "PIMCORE_INSTALL: $PIMCORE_INSTALL"
          if [ "$PIMCORE_INSTALL" != "false" ]; then
            echo "Running pimcore install"
            cd pimcore-install
            echo "Deleting pimcore-install Job (so we can recreate it) ... a failure is not a problem:"
            kubectl -n "${NAMESPACE_PREFIX}-${ENVIRONMENT}" --context="${CONTEXT}" delete job pimcore-install || true
            echo "Setting image version (php-fpm)"
            kustomize edit set image "k-registry.krankikom.de/krankikom/pimcore-website=${FULL_IMAGENAME_LOWER}:${IMAGELABEL}"
            echo "Setting namespace ${NAMESPACE_PREFIX}-${ENVIRONMENT}"
            kustomize edit set namespace "${NAMESPACE_PREFIX}-${ENVIRONMENT}"
            echo "build dry-run"
            kustomize build
            echo "Running kubeval"
            kustomize build | kubeval --ignore-missing-schemas --strict --force-color
            echo "Running kubectl apply"
            kustomize build | kubectl --context="${CONTEXT}" apply -f -
            cd ..
          fi
        env:
          CONTEXT: ${{ inputs.k8scontext }}
          ENVIRONMENT: ${{ inputs.environment }}
          FULL_IMAGENAME_LOWER: ${{ steps.lowercase-fully-qualified-image-name.outputs.lowercase }}
          IMAGELABEL: ${{ inputs.imagelabel }}
          PIMCORE_INSTALL: ${{ inputs.pimcore_install }}
          KUBECFGSECRET: ${{ secrets.KUBECONFIG }}
