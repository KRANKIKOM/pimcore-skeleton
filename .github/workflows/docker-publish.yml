# Skip this workflow for pimcore-skeleton repository
name: Docker

on:
  push:
    branches: [ "master", "main" ]
    tags: [ 'env-*' ]
  pull_request:
    branches: [ "*" ]

jobs:
  check_repository:
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check.outputs.should_run }}
    steps:
      - id: check
        run: |
          echo "GITHUB_REPOSITORY: $GITHUB_REPOSITORY"
          if [ "$GITHUB_REPOSITORY" = "KRANKIKOM/pimcore-skeleton" ]; then
            echo "should_run=false" >> $GITHUB_OUTPUT
          else
            echo "should_run=true" >> $GITHUB_OUTPUT
          fi

  build:
    needs: check_repository
    if: needs.check_repository.outputs.should_run == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - uses: kenchan0130/actions-system-info@master
        id: system-info

      - name: Cache vendor directory
        uses: actions/cache@v2
        with:
          path: vendor
          key: ${{ runner.os }}-${{ steps.system-info.outputs.release }}-vendor-${{ hashFiles('composer.lock') }}
      - name: run devsetup composer install
        run: |          
          ./devsetup-composer-install.sh

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@312f67c6629946ba17269558b63d0bd84a63caab
        with:
          install: true      

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=match,pattern=env-(.*),group=1
            type=raw,${{ github.run_number }}
            type=raw,latest

      - id: lowercase-fully-qualified-image-name
        uses: ASzc/change-string-case-action@v2
        with:
          string: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@1527803881d0d3d1073ef4278b1168264ce2f779
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}  
          cache-from: type=registry,ref=${{ steps.lowercase-fully-qualified-image-name.outputs.lowercase }}:buildcache
          cache-to: type=registry,ref=${{ steps.lowercase-fully-qualified-image-name.outputs.lowercase }}:buildcache,mode=max

  build-apache:
    needs: check_repository
    if: needs.check_repository.outputs.should_run == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Cache vendor directory
        uses: actions/cache@v2
        with:
          path: vendor
          key: ${{ runner.os }}-${{ steps.system-info.outputs.release }}-vendor-${{ hashFiles('composer.lock') }}
      - name: run devsetup composer install
        run: |          
          ./devsetup-composer-install.sh

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@312f67c6629946ba17269558b63d0bd84a63caab
        with:
          install: true      

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-apache
          tags: |
            type=raw,${{ github.run_number }}
            type=raw,latest

      - id: lowercase-fully-qualified-image-name
        uses: ASzc/change-string-case-action@v2
        with:
          string: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-apache

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@1527803881d0d3d1073ef4278b1168264ce2f779
        with:
          context: .
          file: Dockerfile.apache
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}  
          build-args: 
            MYSQL_HOST=127.0.0.1
            MYSQL_PORT=${{ job.services.mariadb.ports['3306'] }}