name: Review
on: [ pull_request ]

env:
  COMPOSER_REPO_URL: "https://repo.packagist.com/krankikom/"
  COMPOSER_AUTH_TOKEN: "c8a7ecca281bc7a6682a01fc5cb406a73aabf86ed5ffa81285049e650b41"
  COMPOSER_AUTH: "{\"http-basic\": {\"repo.packagist.com\": {\"username\": \"krankikom\", \"password\": \"c8a7ecca281bc7a6682a01fc5cb406a73aabf86ed5ffa81285049e650b41\"}}}"

jobs:
  composer-cache:
    name: Composer cache
    runs-on: ubuntu-24.04
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      #- name: Generate Cache Key
      #  id: cache_key
      #  run: |
      #    HASH="${{ runner.os }}-composer-${{ hashFiles('composer.lock') }}--${{ hashFiles('composer.json') }}"
      #    echo "key=$HASH" >> $GITHUB_OUTPUT      
          
      - uses: actions/cache/restore@v4
        id: cache_restore
        with:
          path: path/to/dependencies
          key: ${{ runner.os }}-composer-${{ hashFiles('composer.lock') }}--${{ hashFiles('composer.json') }}

      - uses: actions/cache/restore@v4
        id: cache_restore_fallback
        if: steps.cache_restore.outputs.cache-hit != 'true'
        with:
          path: path/to/dependencies
          key: ${{ runner.os }}-composer-
  
            
      #- name: Cache Composer packages
      #  id: composer_cache
      #  uses: actions/cache@v3
      #  with:
      #    path: vendor
      #    key: ${{ steps.cache_key.outputs.key }}
      #    restore-keys: |
      #    ${{ runner.os }}-composer-${{ hashFiles('composer.lock') }}--${{ hashFiles('composer.json') }}
      #    ${{ runner.os }}-composer-

      # - name: Check Exact Cache Hit
      #   id: cache_check
      #   run: |
      #     echo "cache-hit: ${{ steps.composer_cache.outputs.cache-hit }}"
      #     echo "key: ${{ steps.cache_key.outputs.key }}"
      #     cache_result_hash=""
          
      #     if [ -f vendor/cache.key ]; then
      #       echo "cache.key file exists - we did any sort of cache hit"
      #       cache_result_hash=$(cat vendor/cache.key)
      #     else
      #       echo "cache.key does not exist"
      #     fi
      #     if [ "${{ steps.composer_cache.outputs.cache-hit }}" = "true" ] && \
      #         [ "${{ steps.cache_key.outputs.key }}" = "$cache_result_hash" ]; then
      #       echo "exact_hit=true" >> $GITHUB_OUTPUT
      #       echo "EXACT HIT"
      #     else
      #       echo "exact_hit=false" >> $GITHUB_OUTPUT
      #       echo "NO EXACT HIT"
      #     fi


      - name: "Install PHP with extensions"
        uses: shivammathur/setup-php@v2
        if: steps.cache_restore.outputs.cache-hit != 'true'
        with:
          coverage: "none"
          php-version: "8.3"

      - name: "Composer install"
        if: steps.cache_restore.outputs.cache-hit != 'true'
        run: |          
          KEEP_LOCKFILE=false
          if [ -f composer.lock ]; then
            KEEP_LOCKFILE=true
          fi
          composer install --no-scripts --no-interaction --no-progress --no-suggest
          if [ "$KEEP_LOCKFILE" = "false" ]; then
            rm -f composer.lock
          fi
          echo "$HASH" >vendor/cache.key
      
      - uses: actions/cache/save@v4
        id: cache_save
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('composer.lock') }}--${{ hashFiles('composer.json') }}
      
  psalm:
    name: Psalm
    runs-on: ubuntu-24.04
    needs: [composer-cache]
    strategy:
      matrix:
        php_version:
          - "8.3"
        dependencies:
          - "locked"
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Restore composer cache
        uses: actions/cache@v4
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('composer.lock') }}--${{ hashFiles('composer.json') }}
      - name: "Install PHP with extensions"
        uses: "shivammathur/setup-php@v2"
        with:
          coverage: "none"
          php-version: "${{ matrix.php_version }}"
      - name: Run Psalm
        id: psalm_check
        run: |
          set +e
          vendor/bin/psalm --long-progress --no-cache --output-format=checkstyle > psalm-report.xml
          psalm_exit_code=$?
          echo "::set-output name=exit_code::$psalm_exit_code"
      - name: Upload Psalm artifact
        uses: actions/upload-artifact@v3
        with:
          name: psalm-report
          path: psalm-report.xml
      - name: Fail job if Psalm failed
        if: steps.psalm_check.outputs.exit_code != '0'
        run: |
          echo "Psalm returned exit code ${{ steps.psalm_check.outputs.exit_code }}, failing job..."
          exit 1

  semgrep:
    name: Semgrep
    runs-on: ubuntu-24.04
    container:
      # A Docker image with Semgrep installed. Do not change this.
      image: semgrep/semgrep

    # Skip any PR created by dependabot to avoid permission issues:
    if: (github.actor != 'dependabot[bot]')

    steps:
      # Fetch project source with GitHub Actions Checkout.
      - uses: actions/checkout@v4

      # 1. Copy the original source
      - name: Backup original source
        run: cp -r . /tmp/original

      # 2. Run Semgrep, generating a SARIF file and also autofixing
      - name: Run Semgrep scan & autofix
        run: |
          semgrep scan --config auto --sarif --autofix > semgrep.sarif
          cat semgrep.sarif
        continue-on-error: true

      # 4. Upload SARIF report so reviewdog can parse
      - name: Upload Semgrep SARIF artifact
        uses: actions/upload-artifact@v3
        with:
          name: semgrep-report
          path: semgrep.sarif
        continue-on-error: true

      # 5. Generate a patch file from the changes
      - name: Generate Semgrep fixes patch
        run: |
          if [ -f semgrep.sarif ]; then
            rm semgrep.sarif
            diff -Naur /tmp/original . > semgrep-fixes.patch || true
            cat semgrep-fixes.patch
          else
            echo "semgrep.sarif not found, skipping patch generation"
          fi

      # 6. Upload the patch file for later use
      - name: Upload Semgrep fixes
        uses: actions/upload-artifact@v3
        with:
          name: semgrep-fixes
          path: semgrep-fixes.patch
        continue-on-error: true

  phpcs:
    name: phpcs
    runs-on: ubuntu-24.04
    needs: [composer-cache]
    strategy:
      matrix:
        php_version:
          - "8.3"
        dependencies:
          - "locked"
    steps:
      - name: Check out code into the workspace
        uses: actions/checkout@v4
      - name: Restore composer cache
        uses: actions/cache@v4
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('composer.lock') }}--${{ hashFiles('composer.json') }}
      - name: "Install PHP with extensions"
        uses: "shivammathur/setup-php@v2"
        with:
          coverage: "none"
          php-version: "${{ matrix.php_version }}"
      - name: Run phpcs
        id: phpcs_check
        run: |
          set +e
          vendor/bin/phpcs --standard=phpcs-ruleset.xml --report=checkstyle > phpcs-report.xml
          phpcs_exit_code=$?
          echo "::set-output name=exit_code::$phpcs_exit_code"
      - name: Upload PHPCS artifact
        uses: actions/upload-artifact@v3
        with:
          name: phpcs-report
          path: phpcs-report.xml
      - name: Fail job if PHPCS failed
        if: steps.phpcs_check.outputs.exit_code != '0'
        run: |
          echo "PHPCS returned exit code ${{ steps.phpcs_check.outputs.exit_code }}, failing job..."
          exit 1

  twigcs:
    name: twigcs
    runs-on: ubuntu-24.04
    needs: [composer-cache]
    strategy:
      matrix:
        php_version:
          - "8.3"
        dependencies:
          - "locked"
    steps:
      - name: Check out code into the workspace
        uses: actions/checkout@v4
      - name: Restore composer cache
        uses: actions/cache@v4
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('composer.lock') }}--${{ hashFiles('composer.json') }}
      - name: "Install PHP with extensions"
        uses: "shivammathur/setup-php@v2"
        with:
          coverage: "none"
          php-version: "${{ matrix.php_version }}"
      - name: Run Twigcs
        id: twigcs_check
        run: |
          set +e
          vendor/bin/twigcs --reporter checkstyle > twigcs-report.xml
          twigcs_exit_code=$?
          echo "::set-output name=exit_code::$twigcs_exit_code"
      - name: Upload Twigcs artifact
        uses: actions/upload-artifact@v3
        with:
          name: twigcs-report
          path: twigcs-report.xml
      - name: Fail job if Twigcs failed
        if: steps.twigcs_check.outputs.exit_code != '0'
        run: |
          echo "Twigcs returned exit code ${{ steps.twigcs_check.outputs.exit_code }}, failing job..."
          exit 1

  reviewdog:
    name: Reviewdog
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        php_version:
          - "8.3"
        dependencies:
          - "locked"
    permissions:
        checks: write
        contents: read
        pull-requests: write
    needs: [psalm, phpcs, twigcs, semgrep]
    if: ${{ always() }}
    steps:
        - name: Check out code into the workspace
          uses: actions/checkout@v4
        - name: Setup reviewdog
          uses: reviewdog/action-setup@v1
        
      
        - name: Download Psalm artifact
          uses: actions/download-artifact@v3
          with:
            name: psalm-report
            path: .
          continue-on-error: true
        - name: Reviewdog for Psalm
          run: |
            if [ -f psalm-report.xml ]; then
              cat psalm-report.xml; \
              cat psalm-report.xml \
              | reviewdog \
              -f=checkstyle \
              -reporter=github-pr-review \
              -name="Psalm Check"
            else
              echo "psalm-report.xml not found, skipping review"
            fi
          env:
            REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          continue-on-error: true

      
        - name: Psalm Fix Suggestions
          env:
              REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          run: |
              psalm_command=`vendor/bin/psalm --no-cache --no-progress --monochrome | grep alter | sed 's/--dry-run//'`; vendor/bin/psalm $psalm_command
          continue-on-error: true

        - name: Psalm Fix Suggestions - Add to PR
          uses: reviewdog/action-suggester@v1
          with:
            tool_name: psalm
            github_token: ${{ secrets.REVIEW_DOG_TOKEN }}



        - name: Download PHPCS artifact
          uses: actions/download-artifact@v3
          with:
            name: phpcs-report
            path: .
          continue-on-error: true
        - name: Reviewdog for PHPCS
          run: |
            if [ -f phpcs-report.xml ]; then  
              cat phpcs-report.xml; \
              cat phpcs-report.xml \
              | reviewdog \
              -f=checkstyle \
              -reporter=github-pr-review \
              -name="PHP CodeSniffer"
            else
              echo "phpcs-report.xml not found, skipping review"
            fi
          env:
            REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          continue-on-error: true
        - name: PHPCS Fix Suggestions
          run: |
            DIRS="src/"
            if [ -d "bundles" ]; then
              DIRS="$DIRS bundles/"
            fi
            vendor/bin/phpcbf -n -v --extensions=php --standard=phpcs-ruleset.xml --ignore=src/Migrations/ $DIRS
          continue-on-error: true
          env:
              REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        - name: PHPCS Fix Suggestions - Add to PR
          uses: reviewdog/action-suggester@v1
          with:
              tool_name: phpcs
              github_token: ${{ secrets.REVIEW_DOG_TOKEN }}

              
        - name: Download Twigcs artifact
          uses: actions/download-artifact@v3
          with:
            name: twigcs-report
            path: .
          continue-on-error: true
        - name: Reviewdog for Twigcs
          run: |
            if [ -f twigcs-report.xml ]; then
              cat twigcs-report.xml; \
              cat twigcs-report.xml \
              | reviewdog \
              -f=checkstyle \
              -reporter=github-pr-review \
              -name="TwigCS Check"
            else
              echo "twigcs-report.xml not found, skipping review"
            fi
          env:
            REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          continue-on-error: true
        
        - name: Download Semgrep artifact
          uses: actions/download-artifact@v3
          with:
            name: semgrep-report
            path: .
          continue-on-error: true
        - name: Reviewdog for Semgrep
          run: |
            if [ -f semgrep.sarif ]; then
              cat semgrep.sarif | reviewdog \
                -f=sarif \
                -reporter=github-pr-review \
                -name="Semgrep Check"
            else
              echo "semgrep.sarif not found, skipping review"
            fi
          env:
            REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            continue-on-error: true

        - name: Download Semgrep fixes artifact
          uses: actions/download-artifact@v3
          with:
            name: semgrep-fixes
            path: .
          continue-on-error: true

        - name: Apply Semgrep patch
          run: |
            if [ -f semgrep-fixes.patch ] && [ -s semgrep-fixes.patch ]; then
              patch -p1 -f < semgrep-fixes.patch || true
            else
              echo "semgrep-fixes.patch not found or is empty, skipping patch application"
            fi
          continue-on-error: true

        - name: Semgrep fix suggestions
          uses: reviewdog/action-suggester@v1
          with:
            tool_name: semgrep
            github_token: ${{ secrets.REVIEW_DOG_TOKEN }}

