apiVersion: v1
kind: Service
metadata:
  name: pimcore-varnish
  labels:
    app: pimcore-varnish
  annotations:
spec:
  type: ClusterIP
  ports:
  - name: pimcore-varnish
    port: 80
    targetPort: http
  selector:
    app: pimcore-varnish
---
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: pimcore-varnish
  name: pimcore-varnish
spec:
  selector:
    matchLabels:
      app: pimcore-varnish
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: pimcore-varnish
    spec:
      containers:
      - image: varnish:6.0
        name: pimcore-varnish
        resources:
          limits:
            cpu: 2000m
            memory: 2048Mi
          requests:
            cpu: 500m
            memory: 2048Mi
        ports:
        - name: http
          containerPort: 80
        livenessProbe:
          httpGet:
            path: /healthz
            port: http
          initialDelaySeconds: 5
          timeoutSeconds: 10
        env:
        - name: VARNISH_SIZE
          value: "1536M"
        readinessProbe:
          httpGet:
            path: /healthz
            port: http
          initialDelaySeconds: 5
          timeoutSeconds: 10
        volumeMounts:
        - name: varnish-config
          mountPath: /etc/varnish/default.vcl
          subPath: default.vcl
      volumes:
      - name: varnish-config
        configMap:
          name: varnish-config
---
apiVersion: v1
data:
  default.vcl: |
    vcl 4.0;

    backend default {
      .host = "pimcore-website-fpm:80";
    }

    sub vcl_recv {
      if (req.url ~ "^/healthz") {
        return(synth(800));
      }
      unset req.http.Cookie;
      set req.backend_hint = default;

      return (hash);
    }

    sub vcl_backend_response {
      unset beresp.http.set-cookie;
      return (deliver);
    }

    sub vcl_deliver {
      if (obj.hits > 0) {
        set resp.http.X-Cache = "HIT";
      } else {
        set resp.http.X-Cache = "MISS";
      }

      set resp.http.X-Cache-Hits = obj.hits;
      set resp.http.X-Cache-TTL = obj.ttl;
      if (obj.ttl < 0s) {
        set resp.http.X-Cache-GraceTTL = obj.ttl + obj.grace;
      }

    # Remove some headers: PHP version
    unset resp.http.X-Powered-By;

    # Remove some headers: Apache version & OS
    unset resp.http.Server;
    unset resp.http.X-Drupal-Cache;
    unset resp.http.X-Varnish;
    unset resp.http.Via;
    unset resp.http.Link;
    unset resp.http.X-Generator;
    }

    sub vcl_synth {
      # Remove some headers: Apache version & OS
      unset resp.http.Server;
      unset resp.http.X-Varnish;

      if (resp.status == 800) {
        # Reset Status to 200
        set resp.status = 200;
        set resp.http.Content-Type = "text/html; charset=utf-8";
        synthetic( {"<!DOCTYPE html>
         <html>
           <head>
              <title>Status</title>
           </head>
           <body>
             <h1>I'm feeling fine ...</h1>
           </body>
         </html>
        "} );
        return (deliver);
      }
    }
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: varnish-config
